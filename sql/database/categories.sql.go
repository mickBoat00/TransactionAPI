// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: categories.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUserCategory = `-- name: CreateUserCategory :one
INSERT INTO categories (id, name, user_id, createdAt, updatedAt)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, user_id, createdat, updatedat
`

type CreateUserCategoryParams struct {
	ID        uuid.UUID
	Name      string
	UserID    uuid.UUID
	Createdat time.Time
	Updatedat time.Time
}

func (q *Queries) CreateUserCategory(ctx context.Context, arg CreateUserCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, createUserCategory,
		arg.ID,
		arg.Name,
		arg.UserID,
		arg.Createdat,
		arg.Updatedat,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const getUserCategories = `-- name: GetUserCategories :many
SELECT id, name, user_id, createdat, updatedat FROM categories WHERE user_id = $1
`

func (q *Queries) GetUserCategories(ctx context.Context, userID uuid.UUID) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, getUserCategories, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UserID,
			&i.Createdat,
			&i.Updatedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
